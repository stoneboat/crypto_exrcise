#include "des.h"
#include <iostream>
using std::cout;
using std::endl;
//检测des加解密函数编写情况
static  struct des_test_case {
	int num, mode; // mode 1 = encrypt
	unsigned short key[8], txt[8];
} cases[] = {
	{ 1, 1,{ 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	{ 2, 1,{ 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	{ 3, 1,{ 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	{ 4, 1,{ 0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	{ 5, 1,{ 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	{ 6, 1,{ 0x06, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	{ 7, 1,{ 0x07, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	{ 8, 1,{ 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	{ 9, 1,{ 0x09, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	{ 10, 1,{ 0x0A, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
	{ 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 }},
	

	{ 1, 0,{ 0x10, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }},
	{ 2, 0,{ 0x11, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }},
	{ 3, 0,{ 0x12, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }},
	{ 4, 0,{ 0x13, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }},
	{ 5, 0,{ 0x14, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }},
	{ 6, 0,{ 0x15, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }},
	{ 7, 0,{ 0x16, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }},
	{ 8, 0,{ 0x17, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }},
	{ 9, 0,{ 0x18, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }},
	{ 10, 0,{ 0x19, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
	{ 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 }}

};

int main()
{
	//standard result
	DES standard_test(cases[0].txt);
	standard_test.CipherCreate(cases[0].key);
	bitset<65> standard = standard_test.CipherText;
	int num = 0;
	for (int i = 0; i < 10; i++) {
		DES test(cases[i].txt);
		test.CipherCreate(cases[i].key);
		bitset<65> temp = test.CipherText;
		for (int i = 1; i < 65; i++)
			if (standard[i] != temp[i])
				num++;
	}
	cout << (num / 9) << endl;
	cout << endl;

	num = 0;
	//standard result
	DES standard_test2(cases[10].txt);
	standard_test2.CipherDeCreate(cases[0].key);
	bitset<65> standard2 = standard_test2.CipherText;
	for (int i = 11; i < 20; i++) {
		DES test(cases[i].txt);
		test.CipherDeCreate(cases[i].key);
		bitset<65> temp = test.CipherText;
		for (int i = 1; i < 65; i++)
			if (standard2[i] != temp[i])
				num++;
	}
	cout << (num / 9) << endl;
	return 0;
}